# -*- coding: utf-8 -*-
"""Prediction_project.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/11nGbBh2fQ-jpgL6XFRPyd_4Vl4ckc-a2
"""

# Commented out IPython magic to ensure Python compatibility.
import pandas as pd
import numpy as np
from matplotlib import pyplot as plt
# %matplotlib inline
import matplotlib
matplotlib.rcParams["figure.figsize"] = (20,10)

df1 = pd.read_csv("C:/Users/USER/Documents/ZHP/zillow_data.csv")
df1.columns.unique()
#df1.head()

df1.drop(columns= ['zpid', 'streetAddress', 'zipcode', 'state', 'latitude',
       'longitude', 'livingArea', 'homeType',
       'homeStatus', 'daysOnZillow', 'isFeatured', 'shouldHighlight',
       'listing_sub_type', 'isUnmappable', 'isPreforeclosureAuction',
       'homeStatusForHDP', 'priceForHDP', 'isOwnerOccupied',
       'isPremierBuilder', 'isZillowOwned', 'currency', 'country',
       'taxAssessedValue', 'lotAreaUnit', 'isShowcaseListing',
       'group_type', 'zestimate', 'priceSuffix', 'providerListingID',
       'newConstructionType', 'unit', 'datePriceChanged', 'priceReduction',
       'priceChange', 'zestimate', 'openHouse', 'open_house_info',
       'Unnamed: 42'], inplace = True)
df1.head()

df1.drop(df1.columns[df1.columns.str.contains('unnamed',case = False)],axis = 1, inplace = True)
df1.head()

df1.isnull().sum()
df2 = df1.dropna()
df2.head()

df2 = df2.rename(columns={'lotAreaValue': 'total_sqft'})

df2['price_per_sqft']= df2['price'] / df2['total_sqft']
df2.head()

df2.city	 = df2.city.apply(lambda x: x.strip())
location_stats = df2['city'].value_counts(ascending = False)
location_stats
#df2.city.unique()

location_stats.values.sum()
len(location_stats[location_stats>2])
len(location_stats)
len(location_stats[location_stats<=2])

loc_less_than_2 = location_stats[location_stats<=2]
len(loc_less_than_2)

df2.city = df2.city.apply(lambda x: 'other' if x in loc_less_than_2 else x)
len(df2.city.unique())
df2.shape

df4 = df2[~(df2.total_sqft/df2.bedrooms<200)]  #not outliers
df4.head()
df4.shape
df4.bedrooms.unique()

#outlier removal using one standard deviation & mean
def remove_pps_outliers(df):
    df_out = pd.DataFrame()
    for key, subdf in df.groupby('city'):
        m = np.mean(subdf.price_per_sqft)
        st = np.std(subdf.price_per_sqft)
        reduced_df = subdf[(subdf.price_per_sqft>(m-st)) & (subdf.price_per_sqft<=(m+st))]
        df_out = pd.concat([df_out,reduced_df],ignore_index=True)
    return df_out
df5 = remove_pps_outliers(df4)
df5.shape

def plot_scatter_chart(df,location):
    bhk2 = df[(df.city==location) & (df.bedrooms==2)]
    bhk3 = df[(df.city==location) & (df.bedrooms==3)]
    bhk4 = df[(df.city==location) & (df.bedrooms==4)]
    bhk5 = df[(df.city==location) & (df.bedrooms==5)]
    matplotlib.rcParams['figure.figsize'] = (15,10)
    plt.scatter(bhk2.total_sqft,bhk2.price,color='blue',label='2 BHK', s=50)
    plt.scatter(bhk3.total_sqft,bhk3.price,marker= '+', color='green',label='3 BHK', s=50)
    plt.scatter(bhk4.total_sqft,bhk4.price,color='red',label='4 BHK', s=50)
    plt.scatter(bhk5.total_sqft,bhk5.price,color='black',label='5 BHK', s=50)
    plt.xlabel("Total Square Feet Area")
    plt.ylabel("Price (USD)")
    plt.title(location)
    plt.legend()

plot_scatter_chart(df5,"Peoria")

def remove_bhk_outliers(df):
    exclude_indices = np.array([])
    for location, location_df in df.groupby('city'):
        bhk_stats = {}
        for bhk, bhk_df in location_df.groupby('bedrooms'):
            bhk_stats[bhk] = {
                'mean': np.mean(bhk_df.price_per_sqft),
                'std': np.std(bhk_df.price_per_sqft),
                'count': bhk_df.shape[0]
            }
        for bhk, bhk_df in location_df.groupby('bedrooms'):
            stats = bhk_stats.get(bhk-1)
            if stats and stats['count']>5:
                exclude_indices = np.append(exclude_indices, bhk_df[bhk_df.price_per_sqft<(stats['mean'])].index.values)
    return df.drop(exclude_indices,axis='index')
df5 = remove_bhk_outliers(df4)
# df8 = df7.copy()
df5.shape

plot_scatter_chart(df5,"Chandler")
df5.city.unique()

city_name = 'Phoenix'
filtered_df = df5[df5['city'] == city_name]
print("\nRows with city value 'Phoenix':")
print(filtered_df)

df6 = df5[df5.bathrooms<df5.bedrooms+2]
df6.shape
df6

df7 = df6.drop(['price_per_sqft'], axis=1)
df7

#to build model, we need to convert all values to num so do one hot encoding
dummies = pd.get_dummies(df7.city)
df8 = pd.concat([df7,dummies.drop('other',axis='columns')],axis='columns')
df9 = df8.drop('city', axis= 'columns')
df9.head()
#pickle df for future use
X = df9.drop(['price'],axis='columns')
X.to_pickle("C:/Users/USER/Documents/ZHP/server/X.pkl")
y = df9.price
len(y)

from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_absolute_percentage_error
from sklearn import preprocessing
from sklearn.preprocessing import MinMaxScaler


X_train, X_valid, Y_train, Y_valid = train_test_split(
    X, y, train_size=0.8, test_size=0.2, random_state=0)



from catboost import CatBoostRegressor
cb_model = CatBoostRegressor()
cb_model.fit(X_train, Y_train)
preds = cb_model.predict(X_valid)
#score = cb_model.score(X_valid, Y_valid)
#print(score)
print(mean_absolute_percentage_error(Y_valid, preds))


#Prediction
def predict_price(city,total_sqft,bathrooms,bedrooms):
    loc_index = np.where(X.columns==city)[0][0]

    x = np.zeros(len(X.columns))
    x[0] = total_sqft
    x[1] = bathrooms
    x[2] = bedrooms
    if loc_index >= 0:
        x[loc_index] = 1

    return cb_model.predict([x])[0]

predict_price('Phoenix',7300, 1, 3)

import pickle
with open('final_model.pickle','wb') as f:
    pickle.dump(cb_model,f)

